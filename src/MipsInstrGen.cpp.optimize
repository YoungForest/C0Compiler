#include "MipsInstrGen.h"
#include "SymbolTable.h"
#include <iostream>
#include <sstream>
#include <stdlib.h>

using namespace std;

MipsInstrGen::~MipsInstrGen()
{
    //dtor
}

string MipsInstrGen::to_string(int i)
{
    stringstream ss;
    ss << i;
    string s = ss.str();
    return s;
}
void MipsInstrGen::holeOptimize()
{
    /*
    lw $t0 -40($fp) 
    sw $t0 -40($sp)
    可以删掉第二条语句

    sw $t0 -40($fp)
    lw $t0 -40($sp)
    可以删掉第二条语句
    */
    for (auto it = finalCodes.begin(); it+1 != finalCodes.end(); it++)
    {
        auto after = it + 1;
        while (((*it).des == (*after).des && (*it).src1 == (*after).src1 && (*it).src2 == (*after).src2) && (((*it).op == "lw" && (*after).op == "sw") || ((*it).op == "sw" && (*after).op == "lw")))
        {
            finalCodes.erase(after);
            after = it + 1;
        }
    }
}

void MipsInstrGen::saveWord(symbolItem * item, string value)
{
    if (item->kind == CONSTANT) // 如果是常量的话, 不需要进行保存
        return;
    if (item->scope == GLOBAL)
        appendInstruction(MipsCode::sw, value, item->name);
    else
        appendInstruction(MipsCode::sw, value, to_string(item->valueoroffset) + "($fp)");
}
void MipsInstrGen::loadWord(symbolItem * item, std::string value)
{
    if (item->kind == CONSTANT)
    {
        appendInstruction(MipsCode::li, value, to_string(item->valueoroffset));
    }
    else
    {
        if (item->scope == GLOBAL)
            appendInstruction(MipsCode::lw, value, item->name);
        else
            appendInstruction(MipsCode::lw, value, to_string(item->valueoroffset) + "($fp)");
    }
}
// get the negition of a branch mips code;
MipsCode MipsInstrGen::branchNeg(MipsCode _op)
{
    switch (_op)
    {
    case bgt:
        return MipsCode::blt;   // > -> <
    case bge:
        return MipsCode::ble;   // >= -> <=
    case blt:
        return MipsCode::bgt;   // < -> >
    case ble:
        return MipsCode::bge;   // <= -> >=
    case beq:
        return MipsCode::beq;   // = -> =
    case bne:
        return MipsCode::bne;   // != -> !=
    default:
        cout << "wrong use of branchNeg!" << endl;  // unaccessable if everything go right
        exit(0);
    }
}
// 专门为 set label, 虽然之后发现可以不要
void MipsInstrGen::appendInstruction(string label)
{
    Instruction newone(label);
    finalCodes.push_back(newone);
}

void MipsInstrGen::appendInstruction(MipsCode _op, std::string _des, std::string _src1, std::string _src2)
{
    Instruction newone(_op, _des, _src1, _src2);
    finalCodes.push_back(newone);
}

void MipsInstrGen::lss(QuaterInstr * current, MipsCode _op)
{
    if (current->src1->kind == CONSTANT && current->src2->kind == CONSTANT) // 常量合并
    {
        switch (_op)
        {
        case bgt:
            if (current->src1->valueoroffset > current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        case bge:
            if (current->src1->valueoroffset >= current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        case blt:
            if (current->src1->valueoroffset < current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        case ble:
            if (current->src1->valueoroffset <= current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        case beq:
            if (current->src1->valueoroffset == current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        case bne:
            if (current->src1->valueoroffset != current->src2->valueoroffset)
                appendInstruction(MipsCode::j, current->label);
            break;
        default:
            break;
        }
    }
    else if (current->src1->kind == CONSTANT && current->src2->kind != CONSTANT)
    {
        string r = getTempRegister(current->src2);
        appendInstruction(branchNeg(_op), r, to_string(current->src1->valueoroffset), current->label);
    }
    else if (current->src1->kind != CONSTANT && current->src2->kind == CONSTANT)
    {
        string r = getTempRegister(current->src1);
        appendInstruction(_op, r, to_string(current->src2->valueoroffset), current->label);
    }
    else
    {
        string r1 = getTempRegister(current->src1);
        string r2 = getTempRegister(current->src2);
        appendInstruction(_op, r1, r2, current->label);
    }
}

void MipsInstrGen::dss(QuaterInstr * current, MipsCode _op)
{
    const string divi0 = "divi0error";
    string t0 = "$k0";
    string t1 = "$k1";
    if (current->src1->kind == CONSTANT && current->src2->kind == CONSTANT)
    {
        switch (_op)
        {
        case MipsCode::add:
            appendInstruction(MipsCode::li, t0, to_string(current->src1->valueoroffset + current->src2->valueoroffset));
            break;
        case MipsCode::sub:
            appendInstruction(MipsCode::li, t0, to_string(current->src1->valueoroffset - current->src2->valueoroffset));
            break;
        case MipsCode::mul:
            appendInstruction(MipsCode::li, t0, to_string(current->src1->valueoroffset * current->src2->valueoroffset));
            break;
        case MipsCode::divi:
            if (current->src2->valueoroffset == 0)
            {
                cout << "label1: Divide by constant 0" << endl; // not accessed
                exit(0);
            }
            appendInstruction(MipsCode::li, t0, to_string(current->src1->valueoroffset / current->src2->valueoroffset));
            break;
        default:
            break;
        }
    }
    else if (current->src1->kind == CONSTANT && current->src2->kind != CONSTANT)
    {
        if (_op != MipsCode::divi)
        {
            appendInstruction(MipsCode::li, t1, to_string(current->src1->valueoroffset));
            string r = getTempRegister(current->src2);
            appendInstruction(_op, t0, t1, r);
            //appendInstruction(_op, t0, t2, to_string(current->src1->valueoroffset));
        }
        else
        {
            appendInstruction(MipsCode::li, t1, to_string(current->src1->valueoroffset));
            string r = getTempRegister(current->src2);
            appendInstruction(MipsCode::beqz, r, divi0);
            appendInstruction(_op, t0, t1, r);
        }
    }
    else if (current->src1->kind != CONSTANT && current->src2->kind == CONSTANT)
    {
        string r = getTempRegister(current->src1);
        if (_op == MipsCode::divi && current->src2->valueoroffset == 0)
        {
            cout << "label2: Divide by constant 0" << endl; // not accessed
            exit(0);
        }
        appendInstruction(_op, t0, r, to_string(current->src2->valueoroffset));
    }
    else
    {
        string r1 = getTempRegister(current->src1);
        appendInstruction(MipsCode::move, t1, r1);  // 考虑避免r2 = r1
        string r2 = getTempRegister(current->src2);
        if (_op == MipsCode::divi)
            appendInstruction(MipsCode::beqz, r2, divi0);
        appendInstruction(_op, t0, t1, r2);
    }
    // des赋值
    string r = getTempRegister(current->des);
    appendInstruction(MipsCode::move, r, t0);
}

void MipsInstrGen::generateInstruction(vector<QuaterInstr*>& middleCodes)
{
    vector<QuaterInstr*>::iterator it = middleCodes.begin();
    const string arrayOutOfRange = "arrayOutOfRange";
    // 所使用的3个寄存器
    while (it != middleCodes.end())
    {
        QuaterInstr* current = (*it);
        const string k0 = "$k0";
        const string k1 = "$k1";
        string r, r1;
        // 由四元式生成目标代码
        switch (current->op)
        {
        case ADD:
            dss(current, MipsCode::add);
            break;
        case SUB:
            dss(current, MipsCode::sub);
            break;
        case MUL:
            dss(current, MipsCode::mul);
            break;
        case DIV:
            dss(current, MipsCode::divi);
            break;
        case LAV:
            if (current->src1->scope == GLOBAL && current->src2->kind == CONSTANT)
            {
                if (current->src2->valueoroffset < 0 || current->src2->valueoroffset >= current->src1->length)
                {
                    cout << "Index of array is out of range" << endl;   // not accessable
                    exit(0);
                }
                if (current->src2->valueoroffset == 0)
                    appendInstruction(MipsCode::lw, k0, current->src1->name);
                else
                    appendInstruction(MipsCode::lw, k0, current->src1->name + "+" + to_string(4 * current->src2->valueoroffset));
            }
            else if (current->src1->scope == GLOBAL && current->src2->kind != CONSTANT)
            {
                r1 = getTempRegister(current->src2);
                appendInstruction(MipsCode::move, k1, r1);
                // 数组越界处理
                appendInstruction(MipsCode::blt, k1, "0", arrayOutOfRange);
                appendInstruction(MipsCode::bge, k1, to_string(current->src1->length), arrayOutOfRange);
                appendInstruction(MipsCode::mul, k1, k1, "4");
                appendInstruction(MipsCode::lw, k0, current->src1->name + "(" + k1 + ")");
            }
            else
            {
                if (current->src2->kind == CONSTANT)
                {
                    if (current->src2->valueoroffset < 0 || current->src2->valueoroffset >= current->src1->length)
                    {
                        cout << "Index of array is out of range" << endl;   // not accessable
                        exit(0);
                    }
                    appendInstruction(MipsCode::lw, k0, to_string(current->src1->valueoroffset - 4 * current->src2->valueoroffset) + "($fp)");
                }
                else
                {
                    r1 = getTempRegister(current->src2);
                    appendInstruction(MipsCode::move, k1, r1);
                    // 数组越界处理
                    appendInstruction(MipsCode::blt, k1, "0", arrayOutOfRange);
                    appendInstruction(MipsCode::bge, k1, to_string(current->src1->length), arrayOutOfRange);
                    appendInstruction(MipsCode::mul, k1, k1, "4");
                    appendInstruction(MipsCode::sub, k1, "$fp", k1);
                    appendInstruction(MipsCode::lw, k0, to_string(current->src1->valueoroffset) + "(" + k1 + ")");
                }
            }
            r = getTempRegister(current->des);
            appendInstruction(MipsCode::move, r, k0);
            break;
        case SAV:
            r = getTempRegister(current->des);
            if (current->src1->scope == GLOBAL)
            {
                if (current->src2->kind == CONSTANT)
                {
                    if (current->src2->valueoroffset < 0 || current->src2->valueoroffset >= current->src1->length)
                    {
                        cout << "Index of array is out of range" << endl;   // not accessable
                        exit(0);
                    }
                    if (current->src2->valueoroffset == 0)
                        appendInstruction(MipsCode::sw, r, current->src1->name);
                    else
                        appendInstruction(MipsCode::sw, r, current->src1->name + "+" + to_string(4 * current->src2->valueoroffset));
                }
                else
                {
                    r1 = getTempRegister(current->src2);
                    appendInstruction(MipsCode::move, k1, r1);
                    // 数组越界处理
                    appendInstruction(MipsCode::blt, k1, "0", arrayOutOfRange);
                    appendInstruction(MipsCode::bge, k1, to_string(current->src1->length), arrayOutOfRange);
                    appendInstruction(MipsCode::mul, k1, k1, "4");
                    appendInstruction(MipsCode::sw, r, current->src1->name + "(" + k1 + ")");
                }
            }
            else
            {
                if (current->src2->kind == CONSTANT)
                {
                    if (current->src2->valueoroffset < 0 || current->src2->valueoroffset >= current->src1->length)
                    {
                        cout << "Index of array is out of range" << endl;   // not accessable
                        exit(0);
                    }
                    appendInstruction(MipsCode::sw, r, to_string(current->src1->valueoroffset - 4 * current->src2->valueoroffset) + "($fp)");
                }
                else
                {
                    r1 = getTempRegister(current->src2);
                    appendInstruction(MipsCode::move, k1, r1);
                    // 数组越界处理
                    appendInstruction(MipsCode::blt, k1, "0", arrayOutOfRange);
                    appendInstruction(MipsCode::bge, k1, to_string(current->src1->length), arrayOutOfRange);
                    appendInstruction(MipsCode::mul, k1, k1, "4");
                    appendInstruction(MipsCode::sub, k1, "$fp", k1);
                    appendInstruction(MipsCode::sw, r, to_string(current->src1->valueoroffset) + "(" + k1 + ")");
                }
            }
            break;
        case NEG:
            r = getTempRegister(current->src1);
            appendInstruction(MipsCode::neg, r, r);
            r1 = getTempRegister(current->des);
            appendInstruction(MipsCode::move, r1, r);
            break;
        case ASS:
            r = getTempRegister(current->src1);
            r1 = getTempRegister(current->des);
            appendInstruction(MipsCode::move, r1, r);
            break;
        case BGT:
            lss(current, MipsCode::bgt);
            break;
        case BGE:
            lss(current, MipsCode::bge);
            break;
        case BLT:
            lss(current, MipsCode::blt);
            break;
        case BLE:
            lss(current, MipsCode::ble);
            break;
        case BEQ:
            lss(current, MipsCode::beq);
            break;
        case BNE:
            lss(current, MipsCode::bne);
            break;
        case BNZ:
            if (current->src1->kind == CONSTANT)
                if (current->src1->valueoroffset != 0)
                    appendInstruction(MipsCode::j, current->label);
                else
                    ;
            else
            {
                r = getTempRegister(current->src1);
                appendInstruction(MipsCode::bnez, r, current->label);
            }
            break;
        case BEZ:
            if (current->src1->kind == CONSTANT)
                if (current->src1->valueoroffset == 0)
                    appendInstruction(MipsCode::j, current->label);
                else
                    ;
            else
            {
                r = getTempRegister(current->src1);
                appendInstruction(MipsCode::beqz, r, current->label);
            }
            break;
        case JUMP:
            appendInstruction(MipsCode::j, current->label);
            break;
        case SET:
            appendInstruction(current->label);
            break;
        case CALL:
            saveandclearPool();     // 保存并清空临时寄存器池
            appendInstruction(MipsCode::jal, current->label);
            break;
        case DEC:
            clearPool();
            appendInstruction(current->des->name);
            appendInstruction(MipsCode::sw, "$ra", "0($sp)");
            appendInstruction(MipsCode::sw, "$fp", "-4($sp)");
            appendInstruction(MipsCode::move, "$fp", "$sp");
            appendInstruction(MipsCode::sw, "$s0", "-8($sp)");
            appendInstruction(MipsCode::sw, "$s1", "-12($sp)");
            appendInstruction(MipsCode::sw, "$s2", "-16($sp)");
            appendInstruction(MipsCode::sw, "$s3", "-20($sp)");
            appendInstruction(MipsCode::sw, "$s4", "-24($sp)");
            appendInstruction(MipsCode::sw, "$s5", "-28($sp)");
            appendInstruction(MipsCode::sw, "$s6", "-32($sp)");
            appendInstruction(MipsCode::sw, "$s7", "-36($sp)");
            appendInstruction(MipsCode::sub, "$sp", "$sp", to_string(BASE_OFFSET));
            break;
        case RET:
            if (current->des == NULL)   // 无返回值
            {
                appendInstruction(MipsCode::li, "$v0", "0");
            }
            else
            {
                if (current->des->kind == CONSTANT)
                    appendInstruction(MipsCode::li, "$v0", to_string(current->des->valueoroffset));
                else
                {
                    r = getTempRegister(current->des);
                    appendInstruction(MipsCode::move, "$v0", r);
                }
            }
            appendInstruction(MipsCode::lw, "$s0", "-8($fp)");
            appendInstruction(MipsCode::lw, "$s1", "-12($fp)");
            appendInstruction(MipsCode::lw, "$s2", "-16($fp)");
            appendInstruction(MipsCode::lw, "$s3", "-20($fp)");
            appendInstruction(MipsCode::lw, "$s4", "-24($fp)");
            appendInstruction(MipsCode::lw, "$s5", "-28($fp)");
            appendInstruction(MipsCode::lw, "$s6", "-32($fp)");
            appendInstruction(MipsCode::lw, "$s7", "-36($fp)");
            appendInstruction(MipsCode::lw, "$ra", "0($fp)");
            appendInstruction(MipsCode::move, "$sp", "$fp");
            appendInstruction(MipsCode::lw, "$fp", "-4($fp)");
            appendInstruction(MipsCode::jr, "$ra");
            break;
        case DSP:
            appendInstruction(MipsCode::sub, "$sp", "$sp", current->label);
            break;
        case READ:
            if (current->des->type == INT_TYPE)
            {
                appendInstruction(MipsCode::li, "$v0", "5");
                appendInstruction(MipsCode::syscall);
                r = getTempRegister(current->des);
                appendInstruction(MipsCode::move, r, "$v0");
            }
            else if (current->des->type == CHAR_TYPE)
            {
                appendInstruction(MipsCode::li, "$v0", "12");
                appendInstruction(MipsCode::syscall);
                r = getTempRegister(current->des);
                appendInstruction(MipsCode::move, r, "$v0");
            }
            else
            {
                cout << "READ ERROR CHECK SOURCE!" << endl;
            }
            break;
        case WRITE:
            if (current->des->kind == CONSTANT)
            {
                if (current->des->type == INT_TYPE)
                {
                    appendInstruction(MipsCode::li, "$a0", to_string(current->des->valueoroffset));
                    appendInstruction(MipsCode::li, "$v0", "1");
                }
                else if (current->des->type == CHAR_TYPE)
                {
                    appendInstruction(MipsCode::li, "$a0", to_string(current->des->valueoroffset));
                    appendInstruction(MipsCode::li, "$v0", "11");
                }
                else if (current->des->type == STRING_TYPE)
                {
                    appendInstruction(MipsCode::li, "$v0", "4");
                    appendInstruction(MipsCode::la, "$a0", current->des->name);
                }
                else
                    ;
            }
            else
            {
                if (current->des->type == INT_TYPE)
                {
                    r = getTempRegister(current->des);
                    appendInstruction(MipsCode::move, "$a0", r);
                    appendInstruction(MipsCode::li, "$v0", "1");
                }
                else if (current->des->type == CHAR_TYPE)
                {
                    r = getTempRegister(current->des);
                    appendInstruction(MipsCode::move, "$a0", r);
                    appendInstruction(MipsCode::li, "$v0", "11");
                }
                else
                    ;
            }
            appendInstruction(MipsCode::syscall);
            break;
        case PUSH:
            r = getTempRegister(current->des);
            appendInstruction(MipsCode::sw, r, to_string(current->src1->valueoroffset) + "($sp)");
            break;
        case PUT:
            r = getTempRegister(current->des);
            appendInstruction(MipsCode::move, r, "$v0");
            break;
        default:
            break;
        }
        it++;
    }
}

std::string MipsInstrGen::getTempRegister(symbolItem * item)
{
    std::string r;
    r = search(item);
    if (r.empty())
    {
        r = alloc(item);
    }
    return r;
}

std::string MipsInstrGen::alloc(symbolItem * item)
{
    static int index = 0;
    int i;
    for (i = 0; i < POOL_SIZE; i++)
    {
        if (pool.occupy[i] == false)
        {
            pool.occupy[i] = true;
            pool.objects[i] = item;
            loadWord(item, getRegString(i));
            return getRegString(i);
        }
    }
    saveWord(pool.objects[index], getRegString(index));
    pool.objects[index] = item;
    loadWord(item, getRegString(index));
    std::string r = getRegString(index);
    index = (index + 1) % POOL_SIZE;
    return r;
}

std::string MipsInstrGen::search(symbolItem * item)
{
    for (int i = 0; i < POOL_SIZE; i++)
    {
        if (pool.occupy[i] == true && pool.objects[i] == item)
            return getRegString(i);
    }
    return "";
}

std::string MipsInstrGen::getRegString(int r)
{
    const std::string regs[] = {
        "$t0",
        "$t1",
        "$t2",
        "$t3",
        "$t4",
        "$t5",
        "$t6",
        "$t7",
        "$t8",
        "$t9"
    };
    if (r < 0)
        cout << "register id " << r << " < 0" << endl;
    if (r >= POOL_SIZE)
        cout << "register id " << r << " >= " << POOL_SIZE << endl;
    return regs[r];
}

void MipsInstrGen::clearPool()
{
    for (int i = 0; i < POOL_SIZE; i++)
    {
        pool.objects[i] = nullptr;
        pool.occupy[i] = false;
    }
}

void MipsInstrGen::saveandclearPool()
{
    for (int i = 0; i < POOL_SIZE; i++)
    {
        if (pool.occupy[i] == true)
        {
            saveWord(pool.objects[i], getRegString(i));
            pool.objects[i] = nullptr;
            pool.occupy[i] = false;
        }
    }
}